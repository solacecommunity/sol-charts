{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "HeaderAction.svelte",
    "HeaderActionLink.svelte",
    "HeaderActionSearch.svelte",
    "HeaderPanelDivider.svelte",
    "404.svelte",
    "BrokerAttributeMultiSelect.svelte",
    "BrokerClientMultiSelect.svelte",
    "Chart.svelte",
    "Charts.svelte",
    "Setting.svelte",
    "Settings.svelte"
  ],
  "sourcesContent": [
    "<script>\n  /**\n   * Set to `true` to open the panel\n   * @type {boolean} [isOpen=false]\n   */\n  export let isOpen = false;\n\n  /**\n   * Specify the icon props\n   * @type {{ render: typeof import(\"carbon-icons-svelte/lib/Add16\").default; skeleton: boolean; }} [icon]\n   */\n  export let icon = undefined;\n\n  /**\n   * Specify the text\n   * Alternatively, use the named slot \"text\" (e.g. <div slot=\"text\">...</div>)\n   * @type {string} [text]\n   */\n  export let text = undefined;\n\n  /**\n   * Obtain a reference to the button HTML element\n   * @type {null | HTMLButtonElement} [ref=null]\n   */\n  export let ref = null;\n\n  import { createEventDispatcher } from \"svelte\";\n  import { slide } from \"svelte/transition\";\n  import Close20 from \"carbon-icons-svelte/lib/Close20\";\n  import AppSwitcher20 from \"carbon-icons-svelte/lib/AppSwitcher20\";\n  import { Icon } from \"../../Icon\";\n\n  const dispatch = createEventDispatcher();\n\n  let refPanel = null;\n</script>\n\n<style>\n  .action-text {\n    font-size: 16px;\n    line-height: 20px;\n    text-decoration: none;\n    color: #fff;\n    width: 100%;\n    padding: 0 1rem;\n  }\n\n  .action-text > span {\n    margin-left: 0.75rem;\n    vertical-align: top;\n  }</style>\n\n<svelte:window\n  on:click=\"{({ target }) => {\n    if (isOpen && !ref.contains(target) && !refPanel.contains(target)) {\n      isOpen = false;\n      dispatch('close');\n    }\n  }}\" />\n\n<div>\n  <button\n    bind:this=\"{ref}\"\n    type=\"button\"\n    class:bx--header__action=\"{true}\"\n    class:bx--header__action--active=\"{isOpen}\"\n    class:action-text=\"{text}\"\n    {...$$restProps}\n    on:click\n    on:click|stopPropagation=\"{() => {\n      isOpen = !isOpen;\n      dispatch(isOpen ? 'open' : 'close');\n    }}\"\n  >\n    <Icon render=\"{isOpen ? Close20 : AppSwitcher20}\" {...icon} />\n    <slot name=\"text\">\n      {#if text}<span>{text}</span>{/if}\n    </slot>\n  </button>\n  {#if isOpen}\n    <div\n      bind:this=\"{refPanel}\"\n      class:bx--header-panel=\"{true}\"\n      class:bx--header-panel--expanded=\"{true}\"\n      transition:slide=\"{{ duration: 200 }}\"\n    >\n      <slot />\n    </div>\n  {/if}\n</div>\n",
    "<script>\n  /**\n   * Set to `true` to use the active state\n   * @type {boolean} [linkIsActive=false]\n   */\n  export let linkIsActive = false;\n\n  /**\n   * Specify the `href` attribute\n   * @type {string} [href]\n   */\n  export let href = undefined;\n\n  /**\n   * Specify the icon props\n   * @type {{ render: typeof import(\"carbon-icons-svelte/lib/Add16\").default; skeleton: boolean; }} [icon]\n   */\n  export let icon = undefined;\n\n  /**\n   * Obtain a reference to the HTML anchor element\n   * @type {null | HTMLAnchorElement} [ref=null]\n   */\n  export let ref = null;\n\n  import { Icon } from \"../../Icon\";\n</script>\n\n<style>\n  .action-link {\n    text-align: center;\n    align-items: center;\n    vertical-align: middle;\n    justify-content: center;\n    padding-top: 10px;\n  }</style>\n\n<a\n  bind:this=\"{ref}\"\n  class:bx--header__action=\"{true}\"\n  class:bx--header__action--active=\"{linkIsActive}\"\n  class:action-link=\"{true}\"\n  {...$$restProps}\n  href=\"{href}\"\n>\n  <Icon {...icon} />\n</a>\n",
    "<script>\n  /**\n   * Set to `true` to focus the search\n   * @type {boolean} [searchIsActive=false]\n   */\n  export let searchIsActive = false;\n\n  import { createEventDispatcher } from \"svelte\";\n  import Close20 from \"carbon-icons-svelte/lib/Close20\";\n  import Search20 from \"carbon-icons-svelte/lib/Search20\";\n  import { Icon } from \"../../Icon\";\n  import searchStore from \"../searchStore\";\n\n  const dispatch = createEventDispatcher();\n\n  let searchTabIndex = \"0\";\n  let closeTabIndex = \"-1\";\n  let elInput = undefined;\n  let elTypeSearch = undefined;\n  let isSearchFocus = false;\n\n  function dispatchInputs(event) {\n    const params = {\n      action: \"search\",\n      textInput: event.target.value,\n    };\n    dispatch(\"inputSearch\", params);\n  }\n\n  $: if (!searchIsActive) {\n    if (elInput) {\n      elInput.value = \"\";\n    }\n    searchStore.clear();\n  }\n  $: if (searchIsActive) {\n    searchTabIndex = \"-1\";\n    closeTabIndex = \"0\";\n  } else {\n    searchTabIndex = \"0\";\n    closeTabIndex = \"-1\";\n  }\n  $: if (isSearchFocus) {\n    elInput.focus();\n  }\n  $: showResults = $searchStore ? true : false;\n</script>\n\n<style>\n  .search-wrapper {\n    position: relative;\n    display: flex;\n    max-width: 28rem;\n    width: 100%;\n    margin-left: 0.5rem;\n    height: 3rem;\n    background-color: #393939;\n    color: #fff;\n    transition: max-width 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      background 0.11s cubic-bezier(0.2, 0, 0.38, 0.9);\n  }\n\n  .search-wrapper-hidden {\n    max-width: 3rem;\n    background-color: #161616;\n  }\n\n  .search-focus {\n    outline: 2px solid #fff;\n    outline-offset: -2px;\n  }\n\n  .search-wrapper-2 {\n    display: flex;\n    flex-grow: 1;\n    border-bottom: 1px solid #393939;\n  }\n\n  .btn-search {\n    width: 3rem;\n    height: 100%;\n    padding: 0;\n    flex-shrink: 0;\n    opacity: 1;\n    transition: background-color 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9);\n  }\n\n  .btn-search-disabled {\n    border: none;\n    pointer-events: none;\n  }\n\n  .input-search {\n    font-size: 1rem;\n    font-weight: 400;\n    line-height: 1.375rem;\n    letter-spacing: 0;\n    color: #fff;\n    caret-color: #fff;\n    background-color: initial;\n    border: none;\n    outline: none;\n    width: 100%;\n    height: 3rem;\n    padding: 0;\n    transition: opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9);\n  }\n\n  .input-hidden {\n    opacity: 0;\n    pointer-events: none;\n  }\n\n  .btn-clear {\n    width: 3rem;\n    height: 100%;\n    padding: 0;\n    flex-shrink: 0;\n    opacity: 1;\n    display: block;\n    transition: background-color 0.11s cubic-bezier(0.2, 0, 0.38, 0.9),\n      opacity 0.11s cubic-bezier(0.2, 0, 0.38, 0.9);\n  }\n\n  .btn-clear:hover {\n    background-color: #4c4c4c;\n  }\n\n  .btn-clear-hidden {\n    opacity: 0;\n    display: none;\n  }</style>\n\n<svelte:window\n  on:mouseup=\"{({ target }) => {\n    if (target && elTypeSearch) {\n      if (!elTypeSearch.contains(target)) {\n        searchIsActive = false;\n        isSearchFocus = false;\n      }\n    }\n  }}\"\n/>\n\n<div\n  bind:this=\"{elTypeSearch}\"\n  role=\"search\"\n  class=\"search-wrapper\"\n  class:search-wrapper-hidden=\"{!searchIsActive}\"\n  class:search-focus=\"{isSearchFocus || searchIsActive}\"\n>\n  <div\n    id=\"right-panel-action-search\"\n    class=\"search-wrapper-2\"\n    role=\"combobox\"\n    aria-expanded=\"{searchIsActive}\"\n  >\n    <button\n      tabindex=\"{searchTabIndex}\"\n      aria-label=\"Search\"\n      class:bx--header__action=\"{true}\"\n      class:btn-search=\"{true}\"\n      class:btn-search-disabled=\"{searchIsActive}\"\n      on:click=\"{() => {\n        isSearchFocus = true;\n        searchIsActive = true;\n        dispatch('focusInputSearch');\n      }}\"\n      type=\"button\"\n      on:keydown=\"{({ key }) => {\n        if (key === 'Enter') {\n          searchIsActive = !searchIsActive;\n        }\n      }}\"\n    >\n      <Icon title=\"Search\" tabindex=\"0\" render=\"{Search20}\" />\n    </button>\n    <input\n      bind:this=\"{elInput}\"\n      id=\"input-search-field\"\n      type=\"text\"\n      autocomplete=\"off\"\n      tabindex=\"{closeTabIndex}\"\n      class=\"input-search\"\n      class:input-hidden=\"{!searchIsActive}\"\n      placeholder=\"Search\"\n      on:focus=\"{() => dispatch('focusInputSearch')}\"\n      on:focusout=\"{() => dispatch('focusOutInputSearch')}\"\n      on:input=\"{dispatchInputs}\"\n    />\n    <button\n      id=\"right-panel-close-search\"\n      tabindex=\"{closeTabIndex}\"\n      class:bx--header__action=\"{true}\"\n      class:btn-clear=\"{true}\"\n      class:btn-clear-hidden=\"{!searchIsActive}\"\n      type=\"button\"\n      aria-label=\"Clear search\"\n      on:click=\"{() => {\n        isSearchFocus = false;\n        searchIsActive = false;\n        searchStore.clear();\n      }}\"\n      on:keydown=\"{({ key }) => {\n        if (key === 'Enter') {\n          searchIsActive = !searchIsActive;\n        }\n      }}\"\n    >\n      <Icon title=\"Close\" tabindex=\"0\" render=\"{Close20}\" />\n    </button>\n  </div>\n</div>\n",
    "<style>\n  .subject-divider {\n    color: #525252;\n    padding-bottom: 4px;\n    border-bottom: 1px solid #525252;\n    margin: 32px 1rem 8px;\n  }\n\n  .subject-divider span {\n    font-size: 0.75rem;\n    font-weight: 400;\n    line-height: 1rem;\n    letter-spacing: 0.32px;\n    color: #c6c6c6;\n  }</style>\n\n<li class=\"subject-divider\">\n  <span>\n    <slot />\n  </span>\n</li>\n",
    "<script lang=\"ts\">import { Grid, Row, Column } from 'carbon-components-svelte';\n</script>\n\n<style>\n    .center-content {\n        display: flex;\n        justify-content: center;\n        align-content: center;\n    }</style>\n\n<Grid>\n    <Row>\n        <Column>\n            <div class=\"center-content\">\n                <h1>NOT FOUND</h1>\n            </div>\n        </Column>\n    </Row>\n    <Row>\n        <Column>\n            <div class=\"center-content\"><img src=\"images/goodbye_otter_v3.gif\" alt=\"404\" /></div>\n        </Column>\n    </Row>\n</Grid>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Button, Tag, MultiSelect, Row, Column } from 'carbon-components-svelte';\nimport { getContext, onMount } from 'svelte';\nimport { ChartAttributeMaps } from './ChartAttributeMaps';\nimport { getVpnMonitorAttributeDictionary } from '../dict/MonitorAttributes';\nimport BrokerClientMultiSelect from './BrokerClientMultiSelect.svelte';\nimport ArrowShiftDown16 from 'carbon-icons-svelte/lib/ArrowShiftDown16';\nimport MacShift16 from 'carbon-icons-svelte/lib/MacShift16';\nexport let chartId;\nexport let brokerId;\nexport let brokerLabel;\nexport let sempVer;\nexport let disabled = false;\nlet showClientAttributes = false;\nlet selectedAttributes = [];\nlet tagList = [];\nlet VPN_MONITOR_ATTRIBUTES = [];\nlet chartAttributeMaps = getContext(ChartAttributeMaps.CONTEXT_KEY);\n//Function to remove an attribute from the select list\nfunction removeAttribute(id) {\n    if (!disabled) {\n        tagList = tagList.filter((tag) => tag.id != id);\n        selectedAttributes = selectedAttributes.filter((selection) => selection != id);\n    }\n}\n//Reactive block to detect changes in attribute selections in order to update the tags\n$: {\n    //Attribute list length limited to 4\n    if (selectedAttributes.length > 4)\n        selectedAttributes.pop();\n    else\n        updateAttributeTags(selectedAttributes);\n}\n//Function to update the attribute tags\nfunction updateAttributeTags(selections) {\n    tagList = [];\n    if (selections.length > tagList.length)\n        VPN_MONITOR_ATTRIBUTES.forEach((attribute) => {\n            if (selections.find((selection) => selection == attribute.id)) {\n                tagList = [...tagList, attribute];\n            }\n        });\n    //Update the map of the chart -> broker -> attributes\n    chartAttributeMaps.setAttributesToChartBroker(chartId, brokerId, selections);\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    VPN_MONITOR_ATTRIBUTES = getVpnMonitorAttributeDictionary(sempVer);\n}));\n</script>\n\n<style>\n.center-content {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.pt-10 {\n    padding-top: 10px;\n}\n\n.pl-10 {\n    padding-left: 10px;\n}\n\n.mb-10 {\n    margin-bottom: 10px;\n}</style>\n\n<Row>\n    <Column>\n        <div class=\"pl-10\">\n            <MultiSelect\n                disabled=\"{disabled}\"\n                titleText=\"{brokerLabel} Attributes\"\n                placeholder=\"Select {brokerLabel} attributes to chart (Max 4)...\"\n                filterable\n                items=\"{VPN_MONITOR_ATTRIBUTES}\"\n                bind:selectedIds=\"{selectedAttributes}\"\n            />\n        </div>\n    </Column>\n    <Column>\n        <div class=\"center-content\">\n            {#each tagList as { id, text }}\n                <Tag filter type=\"high-contrast\" on:click=\"{() => removeAttribute(id)}\">{text}</Tag>\n            {/each}\n        </div>\n    </Column>\n</Row>\n<Row>\n    <Column>\n        <div class=\"center-content pt-10\">\n            {#if !showClientAttributes}\n                <Button\n                    icon=\"{ArrowShiftDown16}\"\n                    kind=\"tertiary\"\n                    size=\"small\"\n                    style=\"border:none\"\n                    on:click=\"{() => {\n                        showClientAttributes = true;\n                    }}\"\n                >\n                    Show Client Attributes\n                </Button>\n            {:else}\n                <Button\n                    icon=\"{MacShift16}\"\n                    kind=\"tertiary\"\n                    style=\"border:none\"\n                    size=\"small\"\n                    on:click=\"{() => {\n                        showClientAttributes = false;\n                    }}\"\n                >\n                    Hide Client Attributes\n                </Button>\n            {/if}\n        </div>\n    </Column>\n</Row>\n\n{#if showClientAttributes}\n    <div class=\"mb-10\">\n        <Row>\n            <Column>\n                <BrokerClientMultiSelect\n                    chartId=\"{chartId}\"\n                    brokerId=\"{brokerId}\"\n                    brokerLabel=\"{brokerLabel}\"\n                    disabled=\"{disabled}\"\n                    sempVer=\"{sempVer}\"\n                />\n            </Column>\n        </Row>\n    </div>\n{/if}\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Icon, Tag, MultiSelect, Row, Column } from 'carbon-components-svelte';\nimport { getContext, onMount } from 'svelte';\nimport { ChartAttributeMaps } from './ChartAttributeMaps';\nimport { getVpnClientMonitorAttributeDictionary } from '../dict/MonitorAttributes';\nimport { brokerStore, SempConnection } from '../store';\nimport WatsonHealthRotate_36016 from 'carbon-icons-svelte/lib/WatsonHealthRotate_36016';\nexport let chartId;\nexport let brokerId;\nexport let brokerLabel;\nexport let disabled = false;\nexport let sempVer;\nlet nodeAttributeDisabled = true;\nlet selectedClientAttributes = [];\nlet attributeTagList = [];\nlet clientTagList = [];\nlet clientList = [];\nlet selectedClients = [];\nlet CLIENT_MONITOR_ATTRIBUTES;\nlet chartAttributeMaps = getContext(ChartAttributeMaps.CONTEXT_KEY);\nlet sempConnection = $brokerStore.find((broker) => broker.id == brokerId);\n//Async fetch function for getting the clients connected to the VPN\nfunction fetchVpnClients() {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(sempConnection.buildVpnClientUrl(), {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: sempConnection.buildAuthHeader(),\n            },\n        });\n        if (response.ok) {\n            return yield response.json();\n        }\n        else {\n            throw new Error(response.status + ':' + response.statusText);\n        }\n    });\n}\nfunction populateClientList() {\n    fetchVpnClients().then(({ data }) => {\n        selectedClients = [];\n        clientTagList = [];\n        clientList = [];\n        data.forEach(({ clientName, clientAddress, clientUsername }) => {\n            clientList = [\n                ...clientList,\n                {\n                    id: clientName,\n                    text: `ClientName: ${clientName},Address: ${clientAddress},Username:${clientUsername}`,\n                },\n            ];\n        });\n    });\n}\n//Function to remove an a client from the select list\nfunction removeClient(id) {\n    if (!(disabled && nodeAttributeDisabled)) {\n        clientTagList = clientTagList.filter((tag) => tag.id != id);\n        selectedClients = selectedClients.filter((selection) => selection != id);\n    }\n}\n//Function to update the client tags\nfunction updateClientTags(selections) {\n    clientTagList = [];\n    if (selections.length > clientTagList.length)\n        clientList.forEach((client) => {\n            if (selections.find((selection) => selection == client.id)) {\n                clientTagList = [...clientTagList, client];\n            }\n        });\n    //Clear out the clientAttributes\n    if (selections.length == 0) {\n        selectedClientAttributes = [];\n        chartAttributeMaps.resetChartToBrokerClientsAttributeMap(chartId);\n        nodeAttributeDisabled = true;\n    }\n    else {\n        nodeAttributeDisabled = false;\n    }\n    //Update the map of the chart -> broker -> clients,attributes\n    chartAttributeMaps.setClientsToChartBrokerAttributes(chartId, brokerId, selections);\n}\n//Function to update the attribute tags\nfunction updateAttributeTags(selections) {\n    attributeTagList = [];\n    if (selections.length > attributeTagList.length)\n        CLIENT_MONITOR_ATTRIBUTES.forEach((attribute) => {\n            if (selections.find((selection) => selection == attribute.id)) {\n                attributeTagList = [...attributeTagList, attribute];\n            }\n        });\n    //Update the map of the chart -> broker -> clients, attributes\n    chartAttributeMaps.setAttributesToChartBrokerClient(chartId, brokerId, selections);\n}\n//Function to remove an attribute from the select list\nfunction removeAttribute(id) {\n    if (!(disabled && nodeAttributeDisabled)) {\n        attributeTagList = attributeTagList.filter((tag) => tag.id != id);\n        selectedClientAttributes = selectedClientAttributes.filter((selection) => selection != id);\n    }\n}\n//Reactive block to detect changes in attribute selections in order to update the tags\n$: {\n    //Attribute list length limited to 4\n    if (selectedClients.length > 4)\n        selectedClients.pop();\n    else\n        updateClientTags(selectedClients);\n    if (selectedClientAttributes.length > 4)\n        selectedClientAttributes.pop();\n    else\n        updateAttributeTags(selectedClientAttributes);\n    if (disabled) {\n        nodeAttributeDisabled = true;\n    }\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    CLIENT_MONITOR_ATTRIBUTES = getVpnClientMonitorAttributeDictionary(sempVer);\n    populateClientList();\n}));\n</script>\n\n<style>\n.center-content {\n    display: flex;\n    width: 100%;\n    height: 100%;\n    justify-content: center;\n    align-items: center;\n}\n\n.pl-10 {\n    padding-left: 25px;\n}\n\n.refresh-button {\n    font-size: 10px;\n    vertical-align: middle;\n    cursor: pointer;\n}\n\n.rotate {\n    -webkit-animation: rotation 4s infinite linear;\n            animation: rotation 4s infinite linear;\n}\n\n@-webkit-keyframes rotation {\n    from {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg);\n    }\n    to {\n        -webkit-transform: rotate(359deg);\n                transform: rotate(359deg);\n    }\n}\n\n@keyframes rotation {\n    from {\n        -webkit-transform: rotate(0deg);\n                transform: rotate(0deg);\n    }\n    to {\n        -webkit-transform: rotate(359deg);\n                transform: rotate(359deg);\n    }\n}</style>\n\n<Row>\n    <Column>\n        <div class=\"pl-10\">\n            <MultiSelect\n                disabled=\"{disabled}\"\n                titleText=\"{brokerLabel} Clients\"\n                placeholder=\"Select {brokerLabel} clients to chart (Max 4)...\"\n                filterable\n                bind:items=\"{clientList}\"\n                bind:selectedIds=\"{selectedClients}\"\n            />\n            <div class=\"refresh-button\" on:click=\"{populateClientList}\">\n                <Icon style=\"padding-top:5px\" render=\"{WatsonHealthRotate_36016}\" />\n                Refresh Clients\n            </div>\n        </div>\n    </Column>\n    <Column>\n        <div class=\"center-content\">\n            {#each clientTagList as { id, text }}\n                <Tag filter type=\"high-contrast\" on:click=\"{() => removeClient(id)}\">{text}</Tag>\n            {/each}\n        </div>\n    </Column>\n</Row>\n<Row>\n    <Column>\n        <div class=\"pl-10\">\n            <MultiSelect\n                bind:disabled=\"{nodeAttributeDisabled}\"\n                titleText=\"{brokerLabel} Client Attributes\"\n                placeholder=\"Select {brokerLabel} Client Attributes to Chart (Max 4)...\"\n                filterable\n                items=\"{CLIENT_MONITOR_ATTRIBUTES}\"\n                bind:selectedIds=\"{selectedClientAttributes}\"\n            />\n        </div>\n    </Column>\n    <Column>\n        <div class=\"center-content\">\n            {#each attributeTagList as { id, text }}\n                <Tag filter type=\"high-contrast\" on:click=\"{() => removeAttribute(id)}\">{text}</Tag>\n            {/each}\n        </div>\n    </Column>\n</Row>\n",
    "<script lang=\"ts\">import { Button, Grid, Row, Column, TextInput } from 'carbon-components-svelte';\nimport { LineChart } from '@carbon/charts-svelte';\nimport Misuse16 from 'carbon-icons-svelte/lib/Misuse16';\nimport BrokerAttributeMultiSelect from './BrokerAttributeMultiSelect.svelte';\nimport { brokerStore } from '../store';\nimport { getContext } from 'svelte';\nimport { ChartAttributeMaps } from './ChartAttributeMaps';\nimport { getLabelForVpnClientMonitorAttribute, getLabelForVpnMonitorAttribute } from '../dict/MonitorAttributes';\nexport let chartId;\nexport let disabled = false;\nexport let close = (id) => { };\nlet chartLabel = 'Chart ' + chartId;\nlet chartData = [];\nlet chartAttributeMaps = getContext(ChartAttributeMaps.CONTEXT_KEY);\n//Exported function to clear the chart\nexport function clearChart() {\n    chartData = [];\n}\n//Exported function to add VPN data to the chart\nexport function addVPNChartData(timeStamp, brokerId, data) {\n    let attributes = chartAttributeMaps.getAttributesForChartsBroker(chartId, brokerId);\n    let brokerLabel = $brokerStore.find((broker) => broker.id == brokerId).label;\n    let sempVer = $brokerStore.find((broker) => broker.id == brokerId).sempVer;\n    attributes.forEach((attr) => {\n        let attrLabel = getLabelForVpnMonitorAttribute(sempVer, attr);\n        let dataPoint = {\n            group: brokerLabel + ':' + attrLabel,\n            value: getValueFromData(attr, data),\n            date: timeStamp,\n        };\n        chartData = [...chartData, dataPoint];\n    });\n}\nfunction getValueFromData(attr, data) {\n    let nestedAttr = attr.split('.');\n    if (nestedAttr.length > 1) {\n        return data[nestedAttr[0]][nestedAttr[1]];\n    }\n    else {\n        return data[attr];\n    }\n}\n//Exported function to add client data to the chart\nexport function addClientChartData(timeStamp, brokerId, data) {\n    let attributes = chartAttributeMaps.getClientAttributesForChartsBroker(chartId, brokerId);\n    let brokerLabel = $brokerStore.find((broker) => broker.id == brokerId).label;\n    let sempVer = $brokerStore.find((broker) => broker.id == brokerId).sempVer;\n    attributes.forEach((attr) => {\n        let attrLabel = getLabelForVpnClientMonitorAttribute(sempVer, attr);\n        let dataPoint = {\n            group: `${data.clientUsername} (${brokerLabel}) : ${attrLabel}`,\n            value: getValueFromData(attr, data),\n            date: timeStamp,\n        };\n        chartData = [...chartData, dataPoint];\n    });\n}\n</script>\n\n<style>\n.ptb-10 {\n    padding-top: 10px;\n    padding-bottom: 10px;\n}\n\n.mb-10 {\n    margin-bottom: 10px;\n}\n\n.flex {\n    display: flex;\n}\n\n.center-content {\n    justify-content: center;\n    align-content: center;\n    width: 100%;\n}\n.right-content {\n    justify-content: flex-end;\n}\n\n.border-white {\n    border: 2px dotted white;\n    border-radius: 25px;\n}</style>\n\n<Grid>\n    {#if chartId != 1}\n        <Row>\n            <Column>\n                <div class=\"flex right-content\">\n                    <Button\n                        icon=\"{Misuse16}\"\n                        kind=\"tertiary\"\n                        size=\"small\"\n                        style=\"border:none\"\n                        on:click=\"{() => close(chartId)}\"\n                    />\n                </div>\n            </Column>\n        </Row>\n    {/if}\n    <Row>\n        <Column>\n            <h4>Chart {chartId}</h4>\n        </Column>\n    </Row>\n\n    <Row>\n        <Column>\n            <TextInput\n                disabled=\"{disabled}\"\n                labelText=\"Chart Label\"\n                placeholder=\"Chart Label...\"\n                bind:value=\"{chartLabel}\"\n                required\n            />\n        </Column>\n    </Row>\n    <div class=\"ptb-10\">\n        <Row>\n            <Column>\n                <div class=\"flex center-content bx--label\">Attributes to Chart</div>\n            </Column>\n        </Row>\n        {#each $brokerStore as { id, isConnected, label, sempVer }}\n            {#if isConnected}\n                <div class=\"border-white mb-10\">\n                    <Row>\n                        <Column>\n                            <BrokerAttributeMultiSelect\n                                chartId=\"{chartId}\"\n                                brokerId=\"{id}\"\n                                brokerLabel=\"{label}\"\n                                disabled=\"{disabled}\"\n                                sempVer=\"{sempVer}\"\n                            />\n                        </Column>\n                    </Row>\n                </div>\n            {/if}\n        {/each}\n    </div>\n    <Row>\n        <Column>\n            <LineChart\n                data=\"{chartData}\"\n                options=\"{{ title: chartLabel, axes: { left: { title: 'Value', mapsTo: 'value', scaleType: 'linear' }, bottom: { mapsTo: 'date', title: 'Time', scaleType: 'time' } }, curve: 'curveMonotoneY', legend: { alignment: 'center', truncation: { numCharacter: 50 } }, height: '400px' }}\"\n            />\n            <br />\n        </Column>\n    </Row>\n</Grid>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { ComposedModal, ModalHeader, ModalBody, ModalFooter, Select, SelectItem, Button, Grid, Row, Column, ToastNotification, } from 'carbon-components-svelte';\nimport Chart from './Chart.svelte';\nimport { getContext, setContext, onDestroy } from 'svelte';\nimport { ChartAttributeMaps, ClientAttributes } from './ChartAttributeMaps';\nimport ChartArea16 from 'carbon-icons-svelte/lib/ChartArea16';\nimport AlarmAdd16 from 'carbon-icons-svelte/lib/AlarmAdd16';\nimport { brokerStore, SempConnection } from '../store';\nimport { push } from 'svelte-spa-router';\nlet isCharting = false;\nlet charting_store = getContext('isCharting');\nlet noAttributes = false;\nlet sempPoller;\nlet pollingInterval = '5';\nlet vpnPollingErrorMessages = [];\nlet clientPollingErrorMessages = [];\n//Limiting the number of charts that are available to add to 5\nlet chartsAvailable = [\n    { id: 5, component: Chart },\n    { id: 4, component: Chart },\n    { id: 3, component: Chart },\n    { id: 2, component: Chart },\n];\n//Start the display to 1 chart\nlet chartsToDisplay = [{ id: 1, component: Chart }];\n//Set a context with a structure to hold the chart->broker->attribute map\nsetContext(ChartAttributeMaps.CONTEXT_KEY, new ChartAttributeMaps());\nlet chartAttributeMaps = getContext(ChartAttributeMaps.CONTEXT_KEY);\n//Function to add a chart to the DOM\nfunction addChart() {\n    if (chartsToDisplay.length < 5) {\n        chartsToDisplay = [...chartsToDisplay, chartsAvailable.pop()];\n    }\n}\n//Function to remove a chart from the DOM\nfunction removeChart(id) {\n    chartsToDisplay = chartsToDisplay.filter((i) => i.id != id);\n    chartsAvailable.push({ id: id, component: Chart });\n    chartsAvailable.sort((a, b) => {\n        return b.id - a.id;\n    });\n    chartAttributeMaps.resetMaps(id);\n}\n//Function to stop charting\nfunction stopCharting() {\n    if (isCharting && sempPoller) {\n        clearInterval(sempPoller);\n        isCharting = false;\n        charting_store.set(isCharting);\n    }\n}\n//On destroy, ensure to stop charting to kill the timer\nonDestroy(() => stopCharting());\n//Aync fetch  for VPN monitors\nfunction fetchVpnMonitorStats(sempConnection, attrs) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(sempConnection.buildVpnMonitorUrl(attrs), {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: sempConnection.buildAuthHeader(),\n            },\n        });\n        if (response.ok) {\n            return yield response.json();\n        }\n        else {\n            throw new Error(response.status + ':' + response.statusText);\n        }\n    });\n}\n//Aync fetch  for VPN Client monitors\nfunction fetchVpnClientMonitorStats(sempConnection, client, attrs) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const response = yield fetch(sempConnection.buildVpnClientMonitorUrl(client, attrs), {\n            method: 'GET',\n            headers: {\n                'Content-Type': 'application/json',\n                Accept: 'application/json',\n                Authorization: sempConnection.buildAuthHeader(),\n            },\n        });\n        if (response.ok) {\n            return yield response.json();\n        }\n        else {\n            throw new Error(response.status + ':' + response.statusText);\n        }\n    });\n}\nfunction cleanAttributes(sempVer, attributes) {\n    let polledAttributes = [];\n    if (sempVer > 2.12) {\n        attributes.forEach((attr) => {\n            let prefixAndSuffix = attr.split('.');\n            if (prefixAndSuffix.length == 2) {\n                polledAttributes.push(prefixAndSuffix[1]);\n            }\n            else {\n                polledAttributes.push(attr);\n            }\n        });\n    }\n    else {\n        polledAttributes = [...attributes];\n    }\n    return polledAttributes;\n}\n//Function to start charting\nfunction startCharting() {\n    //Ensure that atleast 1 attribute is selected\n    if (!chartAttributeMaps.isABrokerAttributeSet())\n        noAttributes = true;\n    else {\n        //First clear all charts\n        chartsToDisplay.forEach((chart) => chart.component.clearChart());\n        //Set the isCharting flag to true to disable all controls\n        isCharting = true;\n        charting_store.set(isCharting);\n        //Start the interval timer for SEMP polling\n        sempPoller = setInterval(() => {\n            //Get the chart->broker->attribute map\n            let brokerToAttrMap = chartAttributeMaps.getBrokerToAttributesMap();\n            //Get the chart->broker->(client,attributes map)\n            let brokerToClientAttrMap = chartAttributeMaps.getBrokerToClientAttributesMap();\n            let timeStamp = new Date(); //Timestamp for chart polling\n            brokerToClientAttrMap.forEach(({ attributes, clients }, brokerId) => {\n                let sempConnection = $brokerStore.find((broker) => broker.id == brokerId);\n                let polledAttributes = cleanAttributes(sempConnection.sempVer, attributes);\n                if (sempConnection && attributes && clients && clients.length > 0 && attributes.length > 0) {\n                    clients.forEach((client) => {\n                        console.log(`Polling ${sempConnection.label} - ${sempConnection.buildVpnClientMonitorUrl(client, polledAttributes)}...`);\n                        fetchVpnClientMonitorStats(sempConnection, client, polledAttributes)\n                            .then((response) => {\n                            //Clear out the polling errors if applicable\n                            if (clientPollingErrorMessages.length > 0)\n                                clientPollingErrorMessages = clientPollingErrorMessages.filter((errorMessage) => clientPollingErrorMessages.client == client);\n                            //Get the chartIds that are registered for the broker's, clients updates\n                            let chartIds = chartAttributeMaps.getChartsForClientBroker(brokerId, client);\n                            //Push the update to the respective chart\n                            chartsToDisplay.forEach((chart) => {\n                                if (chartIds.includes(chart.id))\n                                    chart.component.addClientChartData(timeStamp, brokerId, response.data);\n                            });\n                        })\n                            .catch((err) => {\n                            //Build the error message and update\n                            let errorMessage = `Error polling client ${client} on ${sempConnection.label} - ${err.message}`;\n                            if (clientPollingErrorMessages.length == 0)\n                                clientPollingErrorMessages = [{ client: client, error: errorMessage }];\n                            else\n                                clientPollingErrorMessages = clientPollingErrorMessages.map((pollErr) => pollErr.client == client ? Object.assign(Object.assign({}, pollErr), { error: errorMessage }) : pollErr);\n                        });\n                    });\n                }\n            });\n            brokerToAttrMap.forEach((attrs, brokerId) => {\n                //Get the SEMP connection object\n                let sempConnection = $brokerStore.find((broker) => broker.id == brokerId);\n                let polledAttributes = cleanAttributes(sempConnection.sempVer, attrs);\n                //If there are attributes for the sempConnection then proceed to fetch\n                if (sempConnection && attrs.length > 0) {\n                    console.log(`Polling ${sempConnection.label} - ${sempConnection.buildVpnMonitorUrl(polledAttributes)}...`);\n                    fetchVpnMonitorStats(sempConnection, polledAttributes)\n                        .then((response) => {\n                        //Clear out the polling errors if applicable\n                        if (vpnPollingErrorMessages.length > 0)\n                            vpnPollingErrorMessages = vpnPollingErrorMessages.filter((errorMessage) => vpnPollingErrorMessages.brokerId == sempConnection.id);\n                        //Get the chartIds that are registered for the broker's updates\n                        let chartIds = chartAttributeMaps.getChartsForBroker(brokerId);\n                        //Push the update to the respective chart\n                        chartsToDisplay.forEach((chart) => {\n                            if (chartIds.includes(chart.id))\n                                chart.component.addVPNChartData(timeStamp, brokerId, response.data);\n                        });\n                    })\n                        .catch((err) => {\n                        //Build the error message and update\n                        let errorMessage = `Error polling ${sempConnection.label} - ${err.message}`;\n                        if (vpnPollingErrorMessages.length == 0)\n                            vpnPollingErrorMessages = [{ brokerId: sempConnection.id, error: errorMessage }];\n                        else\n                            vpnPollingErrorMessages = vpnPollingErrorMessages.map((pollErr) => pollErr.brokerId == sempConnection.id\n                                ? Object.assign(Object.assign({}, pollErr), { error: errorMessage }) : pollErr);\n                    });\n                }\n            });\n        }, parseInt(pollingInterval) * 1000);\n    }\n}\n</script>\n\n<style>\n.mb-10 {\n    margin-bottom: 15px;\n}\n\n.pt-10 {\n    padding-top: 10px;\n}\n\n.mt-10 {\n    margin-top: 10px;\n}\n\n.flex {\n    display: flex;\n}\n\n.inline-flex {\n    position: relative;\n}\n\n.right-content {\n    justify-content: flex-end;\n}\n\n.left-content {\n    justify-content: flex-start;\n}\n\n.center-content {\n    justify-content: center;\n    align-content: center;\n}\n\n.border-white {\n    border: 2px dotted white;\n    border-radius: 25px;\n}</style>\n\n<ComposedModal\n    open=\"{noAttributes}\"\n    danger=\"{true}\"\n    on:submit=\"{() => {\n        noAttributes = false;\n    }}\"\n>\n    <ModalHeader title=\"Unable to chart\" />\n    <ModalBody>Please select one attribute to chart</ModalBody>\n    <ModalFooter primaryButtonText=\"Ok\" />\n</ComposedModal>\n\n<ComposedModal\n    open=\"{!$brokerStore || !$brokerStore.find((broker) => broker.isConnected)}\"\n    danger=\"{true}\"\n    on:submit=\"{() => {\n        push('#/Settings');\n    }}\"\n>\n    <ModalHeader\n        title=\"Connect one broker\"\n        on:click=\"{() => {\n            push('#/Settings');\n        }}\"\n    />\n    <ModalBody>Please add and connect atleast one broker in the settings screen.</ModalBody>\n    <ModalFooter primaryButtonText=\"Ok\" />\n</ComposedModal>\n\n<Grid>\n    <Row>\n        <Column>\n            <h1>Charts</h1>\n        </Column>\n    </Row>\n    <Row>\n        <Column noGutter=\"{true}\">\n            <div class=\"flex pt-10\">\n                {#if !isCharting}\n                    <Button icon=\"{ChartArea16}\" kind=\"primary\" on:click=\"{startCharting}\">Start Charting</Button>\n                {:else}\n                    <Button icon=\"{ChartArea16}\" kind=\"primary\" on:click=\"{stopCharting}\" style=\"background-color:red\">\n                        Stop Charting\n                    </Button>\n                {/if}\n            </div>\n        </Column>\n        <Column>\n            <div class=\"flex left-content\">\n                <Select\n                    disabled=\"{isCharting}\"\n                    labelText=\"Polling Interval (in seconds)\"\n                    bind:selected=\"{pollingInterval}\"\n                >\n                    <SelectItem value=\"1\" text=\"1s\" />\n                    <SelectItem value=\"5\" text=\"5s\" />\n                    <SelectItem value=\"10\" text=\"10s\" />\n                    <SelectItem value=\"30\" text=\"30s\" />\n                    <SelectItem value=\"60\" text=\"60s\" />\n                </Select>\n            </div>\n        </Column>\n\n        <Column>\n            <div class=\"flex right-content pt-10\">\n                <Button disabled=\"{isCharting}\" icon=\"{AlarmAdd16}\" kind=\"tertiary\" on:click=\"{addChart}\">\n                    Add Chart\n                </Button>\n            </div>\n        </Column>\n    </Row>\n    {#each vpnPollingErrorMessages as { error }}\n        <Row>\n            <Column>\n                <div class=\"flex center-content\">\n                    <ToastNotification\n                        kind=\"error\"\n                        notificationType=\"inline\"\n                        title=\"{error}\"\n                        hideCloseButton=\"{true}\"\n                    />\n                </div>\n            </Column>\n        </Row>\n    {/each}\n    {#each clientPollingErrorMessages as { error }}\n        <Row>\n            <Column>\n                <div class=\"flex center-content\">\n                    <ToastNotification\n                        kind=\"error\"\n                        notificationType=\"inline\"\n                        title=\"{error}\"\n                        hideCloseButton=\"{true}\"\n                    />\n                </div>\n            </Column>\n        </Row>\n    {/each}\n\n    <Row>\n        <Column>\n            {#each chartsToDisplay as { id, component } (id)}\n                <div class=\"border-white mt-10\">\n                    <Chart chartId=\"{id}\" bind:this=\"{component}\" close=\"{removeChart}\" disabled=\"{isCharting}\" />\n                </div>\n            {/each}\n        </Column>\n    </Row>\n</Grid>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { FluidForm, TextInput, PasswordInput, Button, Grid, Row, Column, ToastNotification, } from 'carbon-components-svelte';\nimport Link16 from 'carbon-icons-svelte/lib/Link16';\nimport Unlink16 from 'carbon-icons-svelte/lib/Unlink16';\nimport Misuse16 from 'carbon-icons-svelte/lib/Misuse16';\nimport { onMount } from 'svelte';\nimport { fade } from 'svelte/transition';\nimport { SempConnection, brokerStore } from '../store';\nexport let nodeNumber;\nlet nodeLabel = 'Node ' + nodeNumber;\nlet sempUrl, vpnName, sempUser, sempPassword;\nlet connectError = false;\nlet connectErrorMessage = '';\nlet isConnected = false;\n//Exported function to remove the component from the DOM by the parent\nexport let close = (id) => { };\nexport function connectAndStore() {\n    return __awaiter(this, void 0, void 0, function* () {\n        connectToBroker()\n            .then((response) => {\n            isConnected = true;\n            connectError = false;\n            let sempVer = response.data.sempVersion.split('.');\n            let majorMinorVer = parseFloat(sempVer[0] + '.' + sempVer[1]);\n            let sempConnection = new SempConnection(nodeNumber, true, nodeLabel, sempUrl, vpnName, sempUser, sempPassword, majorMinorVer);\n            console.log(`Connected to ${sempUrl} on ${majorMinorVer}...`);\n            brokerStore.removeBroker(nodeNumber);\n            brokerStore.addOrUpdateBroker(sempConnection);\n        })\n            .catch((err) => {\n            isConnected = false;\n            connectError = true;\n            connectErrorMessage = err.message;\n        });\n    });\n}\n//Function to connect to the broker via semp and store\nfunction connectToBroker() {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!isConnected &&\n            nodeLabel !== '' &&\n            sempUrl !== '' &&\n            vpnName !== '' &&\n            sempUser !== '' &&\n            sempPassword !== '') {\n            console.log(`Attempting to connect to ${sempUrl}...`);\n            sempUrl = sempUrl.replace('/SEMP/v2/config', '').trim();\n            if (sempUrl.charAt(sempUrl.length - 1) == '/')\n                sempUrl = sempUrl.substring(0, sempUrl.length - 1);\n            nodeLabel = nodeLabel.trim();\n            vpnName = vpnName.trim();\n            sempUser = sempUser.trim();\n            sempPassword = sempPassword.trim();\n            const response = yield fetch(sempUrl + `/SEMP/v2/monitor/about/api`, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json',\n                    Accept: 'application/json',\n                    Authorization: 'Basic ' + btoa(sempUser + ':' + sempPassword),\n                },\n            });\n            if (response.ok) {\n                return yield response.json();\n            }\n            else {\n                throw new Error('Unable to connect ' + response.statusText);\n            }\n        }\n    });\n}\n//Disconnect the broker so you can edit\nfunction disconnect() {\n    isConnected = false;\n    let sempConnection = new SempConnection(nodeNumber, false, nodeLabel, sempUrl, vpnName, sempUser, sempPassword);\n    brokerStore.removeBroker(nodeNumber);\n    brokerStore.addOrUpdateBroker(sempConnection);\n}\n//Exported function to initialze the component from the parent\nexport function init() {\n    let broker = $brokerStore.find((broker) => broker.id == nodeNumber);\n    if (broker) {\n        nodeLabel = broker.label;\n        sempUrl = broker.sempUrl;\n        sempUser = broker.sempUser;\n        sempPassword = broker.sempPassword;\n        vpnName = broker.vpnName;\n        isConnected = broker.isConnected;\n    }\n}\n//Initialize state onMount\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    init();\n}));\n</script>\n\n<style>\n.center-content {\n    padding-top: 10px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n}\n\n.right-content {\n    display: flex;\n    justify-content: flex-end;\n}</style>\n\n<FluidForm>\n    <Grid>\n        <Row>\n            <Column>\n                <div class=\"right-content\">\n                    {#if nodeNumber != 1}\n                        <Button\n                            icon=\"{Misuse16}\"\n                            kind=\"tertiary\"\n                            size=\"small\"\n                            style=\"border:none\"\n                            on:click=\"{() => close(nodeNumber)}\"\n                        />\n                    {:else}<br />{/if}\n                </div>\n            </Column>\n        </Row>\n        <Row>\n            <Column>\n                <TextInput disabled=\"{isConnected}\" labelText=\"Broker label\" required bind:value=\"{nodeLabel}\" />\n                <TextInput\n                    disabled=\"{isConnected}\"\n                    labelText=\"SEMP URL:Port\"\n                    placeholder=\"https://host:port\"\n                    required\n                    bind:value=\"{sempUrl}\"\n                />\n                <TextInput\n                    disabled=\"{isConnected}\"\n                    labelText=\"VPN Name\"\n                    placeholder=\"VPN Name\"\n                    required\n                    bind:value=\"{vpnName}\"\n                />\n                <TextInput\n                    disabled=\"{isConnected}\"\n                    labelText=\"SEMP User\"\n                    placeholder=\"SEMP User\"\n                    required\n                    bind:value=\"{sempUser}\"\n                />\n                <PasswordInput\n                    disabled=\"{isConnected}\"\n                    labelText=\"SEMP Password\"\n                    placeholder=\"SEMP Password\"\n                    bind:value=\"{sempPassword}\"\n                />\n                <div class=\"center-content\">\n                    {#if !isConnected}\n                        <Button icon=\"{Link16}\" type=\"Submit\" on:click=\"{connectAndStore}\">Connect</Button>\n                    {:else}\n                        <Button icon=\"{Unlink16}\" kind=\"Primary\" on:click=\"{disconnect}\" style=\"background-color:red\">\n                            Disconnect\n                        </Button>\n                    {/if}\n                </div>\n                <br />\n            </Column>\n        </Row>\n        {#if connectError}\n            <Row>\n                <Column>\n                    <div class=\"center-content\" transition:fade>\n                        <ToastNotification\n                            kind=\"error\"\n                            notificationType=\"inline\"\n                            title=\"{connectErrorMessage}\"\n                            hideCloseButton=\"true\"\n                        />\n                    </div>\n                </Column>\n            </Row>\n        {/if}\n    </Grid>\n</FluidForm>\n",
    "<script lang=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Button, Grid, Row, Column } from 'carbon-components-svelte';\nimport AlarmAdd16 from 'carbon-icons-svelte/lib/AlarmAdd16';\nimport Plug16 from 'carbon-icons-svelte/lib/Plug16';\nimport Save16 from 'carbon-icons-svelte/lib/Save16';\nimport Folders16 from 'carbon-icons-svelte/lib/Folders16';\nimport Setting from './Setting.svelte';\nimport { onMount } from 'svelte';\nimport { saveAs } from 'file-saver';\nimport fileDialog from 'file-dialog';\nimport { SempConnection, brokerStore } from '../store';\n// Limiting the amount of nodes available to poll to 5\nlet nodesAvailable = [\n    { id: 5, component: Setting },\n    { id: 4, component: Setting },\n    { id: 3, component: Setting },\n    { id: 2, component: Setting },\n];\n// Start off the display with a single node\nlet nodesToDisplay = [{ id: 1, component: Setting }];\n// Error message for loading file\nlet loadFileErrorMessage = '';\n//Function to add a node to the display\nfunction addNode() {\n    if (nodesToDisplay.length < 5) {\n        nodesToDisplay = [...nodesToDisplay, nodesAvailable.pop()];\n    }\n}\n//Function to remove a node from the display\nfunction removeNode(id) {\n    nodesToDisplay = nodesToDisplay.filter((i) => i.id != id);\n    nodesAvailable.push({ id: id, component: Setting });\n    nodesAvailable.sort((a, b) => {\n        return b.id - a.id;\n    });\n    //Needs to be removed from the store as well\n    brokerStore.removeBroker(id);\n}\n//Attempt to connect all the nodes in the display\nfunction connectAll() {\n    nodesToDisplay.forEach((setting) => {\n        setting.component.connectAndStore();\n    });\n}\n//Function to load a config file\nfunction loadConfig() {\n    fileDialog({ accept: 'application/json' }).then((files) => {\n        let reader = new FileReader();\n        reader.readAsText(files[0], 'UTF-8');\n        reader.onload = (contents) => {\n            try {\n                brokerStore.loadConfig(JSON.parse(contents.target.result.toString()));\n                init();\n                loadFileErrorMessage = '';\n            }\n            catch (err) {\n                loadFileErrorMessage = 'Unable to load file: ' + err;\n                console.log(err);\n            }\n        };\n    });\n}\n//Function to save configuration to a json file\nfunction saveConfig() {\n    let settings = [];\n    let nodeCount = 0;\n    $brokerStore.forEach((broker) => {\n        let sempConnection = new SempConnection(++nodeCount, false, broker.label, broker.sempUrl, broker.vpnName, broker.sempUser, broker.sempPassword);\n        settings.push(sempConnection);\n    });\n    if (settings.length > 0) {\n        let blob = new Blob([JSON.stringify(settings)], { type: 'application/json' });\n        saveAs(blob, 'Settings.json');\n    }\n}\n//Function to initialize a component\nfunction init() {\n    nodesToDisplay.forEach((node) => {\n        node.component.init();\n    });\n    for (let i = 2; i <= $brokerStore.length; i++)\n        addNode();\n}\nonMount(() => __awaiter(void 0, void 0, void 0, function* () {\n    init();\n}));\n</script>\n\n<style>\n.border-white {\n    border: 2px dotted white;\n    border-radius: 25px;\n}\n\n.pb-15 {\n    padding-bottom: 15px;\n}\n\n.pt-10 {\n    padding-top: 5px;\n}\n\n.mt-10 {\n    margin-top: 10px;\n}\n\n.flex {\n    display: flex;\n}\n\n.right-content {\n    justify-content: flex-end;\n}\n\n.left-content {\n    justify-content: flex-start;\n}\n\n.center-content {\n    justify-content: center;\n    align-content: center;\n}</style>\n\n<Grid>\n    <Row>\n        <Column>\n            <h1>Settings</h1>\n        </Column>\n    </Row>\n\n    <Row>\n        <Column>\n            <div class=\"flex left-content pt-10\">\n                <Button icon=\"{Plug16}\" kind=\"secondary\" on:click=\"{connectAll}\" style=\"background-color:green\">\n                    Connect All\n                </Button>\n            </div>\n        </Column>\n        <Column>\n            <div class=\"flex right-content pb-15\">\n                <Button icon=\"{Save16}\" kind=\"secondary\" on:click=\"{saveConfig}\">Save</Button>\n            </div>\n        </Column>\n        <Column>\n            <div class=\"flex left-content\">\n                <span style=\"font-color:red\">{loadFileErrorMessage}</span>\n                <Button icon=\"{Folders16}\" kind=\"secondary\" on:click=\"{loadConfig}\">Load</Button>\n            </div>\n        </Column>\n        <Column>\n            <div class=\"flex right-content\">\n                <Button icon=\"{AlarmAdd16}\" kind=\"tertiary\" on:click=\"{addNode}\">Add node</Button>\n            </div>\n        </Column>\n    </Row>\n    <Row>\n        <Column>\n            {#each nodesToDisplay as { id, component } (id)}\n                <div class=\"mt-10 border-white\">\n                    {#key id}\n                        <Setting nodeNumber=\"{id}\" close=\"{removeNode}\" bind:this=\"{component}\" />\n                    {/key}\n                </div>\n            {/each}\n        </Column>\n    </Row>\n</Grid>\n"
  ],
  "names": [],
  "mappings": "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"
}